{"name":"File-send","tagline":"A http file send","body":"file-send\r\n=========\r\n\r\n>A http file send\r\n\r\n>[![NPM Version][npm-image]][npm-url]\r\n>[![Download Status][download-image]][npm-url]\r\n>[![Linux Status][travis-image]][travis-url]\r\n>[![Windows Status][appveyor-image]][appveyor-url]\r\n>[![Test Coverage][coveralls-image]][coveralls-url]\r\n>![Node Version][node-image]\r\n>[![Dependencies][david-image]][david-url]\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install file-send\r\n```\r\n\r\n## API\r\n\r\n```js\r\nvar http = require('http'),\r\n  FileSend = require('file-send'),\r\n  Send = FileSend('/', {\r\n    etag: false,\r\n    maxAge: '30d'\r\n  });\r\n\r\nhttp.createServer(function (request, response){\r\n  Send.use(request) // Create a new send stream\r\n    .pipe(response); // Send stream to client\r\n});\r\n```\r\n\r\n### FileSend(root, [options])\r\n\r\n  Create a new `Send` for the given `root` path and options to initialize.\r\n\r\n#### Options\r\n\r\n##### *dotFiles*\r\n\r\n  Set how \"dotFiles\" are treated when encountered. A dotFile is a file or directory that begins with a dot (\".\"). Note this check is done on the path itself without checking if the path actually exists on the disk. If `root` is specified, only the dotfiles above the root are checked (i.e. the root itself can be within a dotfile).\r\n\r\n  The default value is `'ignore'`.\r\n\r\n  - `'allow'` No special treatment for dotfiles.\r\n  - `'deny'` Send a 403 for any request for a dotfile.\r\n  - `'ignore'` Pretend like the dotfile does not exist and 404.\r\n\r\n##### *etag*\r\n\r\n  Enable or disable etag generation, defaults to true.\r\n\r\n##### *extensions*\r\n\r\n  If a given file doesn't exist, try appending one of the given extensions, in the given order. By default, this is disabled (set to `false`). An example value that will serve extension-less HTML files: `['html', 'htm']`.\r\n  This is skipped if the requested file already has an extension.\r\n\r\n##### *index*\r\n\r\n  By default send supports \"index.html\" files, to disable this set `false` or to supply a new index pass a string or an array in preferred order.\r\n\r\n##### *lastModified*\r\n\r\n  Enable or disable `Last-Modified` header, defaults to true. Uses the file system's last modified value.\r\n\r\n##### *maxAge*\r\n\r\n  Provide a max-age in milliseconds for http caching, defaults to 0.\r\n  This can also be a string accepted by the [ms](https://www.npmjs.org/package/ms#readme) module.\r\n\r\n### Send.use(request)\r\n\r\n```js\r\nvar stream = Send.use(request); // The Send.use return a new send stream\r\n```\r\n\r\n  Create a new `SendStream` for the given `request` and `response`.\r\n\r\n### Events\r\n  The `SendStream` is an event emitter and will emit the following events:\r\n\r\n  - `error` an error occurred `(err)`\r\n  - `directory` a directory was requested\r\n  - `file` a file was requested `(path, stat)`\r\n  - `headers` the headers are about to be set on a file `(response, path, stat)`\r\n  - `stream` file streaming has started `(stream, next(stream))`\r\n  - `end` streaming has completed\r\n\r\n### stream.pipe(response)\r\n\r\n  The `pipe` method is used to pipe the response into the Node.js HTTP response object, typically `Send.use(req).pipe(res)`.\r\n\r\n## Error-handling\r\n\r\n  By default when no `error` listeners are present an automatic response will be made, otherwise you have full control over the response, aka you may show a 5xx page etc.\r\n\r\n## Caching\r\n\r\n  It does _not_ perform internal caching, you should use a reverse proxy cache such as Varnish for this, or those fancy things called CDNs. If your application is small enough that it would benefit from single-node memory caching, it's small enough that it does not need caching at all ;).\r\n\r\n## Debugging\r\n\r\n  To enable `debug()` instrumentation:\r\n\r\n```\r\n$ node app -v\r\n```\r\nor:\r\n```\r\n$ node app -verbose\r\n```\r\n\r\n## Running tests\r\n\r\n```\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\n## Examples\r\n\r\n  Serving from a root directory with custom error-handling:\r\n\r\n```js\r\nvar http = require('http'),\r\n  FileSend = require('file-send'),\r\n  Send = FileSend('/www/example.com/public'); // Set root\r\n\r\n// Your custom error-handling logic:\r\nfunction error(err) {\r\n  var res = this.response;\r\n  res.statusCode = err.status || 500;\r\n  res.end(err.message);\r\n}\r\n\r\n// Your custom headers\r\nfunction headers(res, path, stat) {\r\n  // serve all files for download\r\n  res.setHeader('Content-Disposition', 'attachment');\r\n}\r\n\r\n// Your custom directory handling logic:\r\nfunction directory(path, stat) {\r\n  // TODO You can do something here\r\n  // Like displays the current directory file list\r\n  this.response.end('This is a directory !');\r\n}\r\n\r\nvar app = http.createServer(function(request, response){\r\n  // Transfer arbitrary files from within /www/example.com/public/*\r\n  Send.use(request)\r\n    .on('error', error)\r\n    .on('directory', directory)\r\n    .on('headers', headers)\r\n    .pipe(response);\r\n}).listen(3000);\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[travis-image]: http://img.shields.io/travis/Nuintun/file-send.svg?style=flat-square&label=linux\r\n[travis-url]: https://travis-ci.org/Nuintun/file-send\r\n[appveyor-image]: https://img.shields.io/appveyor/ci/Nuintun/file-send.svg?style=flat-square&label=windows\r\n[appveyor-url]: https://ci.appveyor.com/project/Nuintun/file-send\r\n[coveralls-image]: http://img.shields.io/coveralls/Nuintun/file-send/master.svg?style=flat-square\r\n[coveralls-url]: https://coveralls.io/r/Nuintun/file-send?branch=master\r\n[node-image]: http://img.shields.io/node/v/file-send.svg?style=flat-square\r\n[david-image]: http://img.shields.io/david/nuintun/file-send.svg?style=flat-square\r\n[david-url]: https://david-dm.org/Nuintun/file-send\r\n[npm-image]: http://img.shields.io/npm/v/file-send.svg?style=flat-square\r\n[npm-url]: https://www.npmjs.org/package/file-send\r\n[download-image]: http://img.shields.io/npm/dm/file-send.svg?style=flat-square\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}